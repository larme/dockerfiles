FROM {{ base_image }}
RUN userdel -r ubuntu

# username
ENV USERNAME=larme

# unminimize system and configure locale
RUN apt-get update && (yes | unminimize) && \
    apt-get update && apt-get -y install locales && \
    locale-gen --no-purge en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8

# configure timezone
ENV TZ=Asia/Hong_Kong
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# install applications
RUN apt-get update && apt-get install -y \
    apt-utils aptitude \
    build-essential cmake pkg-config libtool libffi-dev zlib1g-dev libcurl4-openssl-dev libportaudio2 libzstd-dev \
    man aspell-en w3m libvterm-dev cloc tmux git git-lfs mosh sqlite3 bat \
    python3 python3-venv python3-dev python3-pip python3-jinja2 pipx \
    lua5.4 luarocks shellcheck pandoc \
    texlive texlive-fonts-recommended texlive-extra-utils texlive-latex-extra texlive-lang-chinese texlive-xetex \
    curl wget zip unzip sudo htop gosu iputils-ping proxychains4 netcat-openbsd \
    sdcv vim mg libenchant-2-2 scrypt secure-delete \
    libpng-dev libsndfile1-dev ccls clangd ffmpeg ninja-build \
    emacs-nox software-properties-common sbcl \
    libssl-dev protobuf-compiler \
    && ln -s /usr/bin/batcat /usr/local/bin/bat

# # install emacs 28
# RUN apt-get update && \
#     apt-get install -y software-properties-common && add-apt-repository -y ppa:kelleyk/emacs && \
#     apt-get update && apt-get install -y emacs28-nox

# install docker
RUN apt-get update && apt-get install -y \
    ca-certificates \
    gnupg \
    lsb-release
RUN mkdir -p /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
    echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

# install python3.7 to python 3.10
RUN add-apt-repository -y ppa:deadsnakes/ppa && \
    apt-get update && apt-get install -y \
    python3.7 python3.7-venv python3.7-dev \
    python3.8 python3.8-venv python3.8-dev \
    python3.9 python3.9-venv python3.9-dev \
    python3.10 python3.10-venv python3.10-dev \
    python3.11 python3.11-venv python3.11-dev \
    python3.13 python3.13-venv python3.13-dev


{% for cmd in extra_post_install_commands %}
    {{ cmd }}
{% endfor %}

# add user
RUN useradd -ms /bin/bash $USERNAME
RUN touch /etc/sudoers.d/local-sudoer && \
    echo "$USERNAME   ALL=(ALL) ALL" >> /etc/sudoers.d/local-sudoer && \
    echo "Defaults:$USERNAME      !authenticate" >> /etc/sudoers.d/local-sudoer
RUN chmod 0440 /etc/sudoers.d/local-sudoer

# mkdir workspace for mount volumes
RUN mkdir /workspace

# do everything from now in that users home directory
WORKDIR /home/$USERNAME
ENV HOME=/home/$USERNAME

# install node in user home dir
ENV NODE_VERSION={{ node_version }}
ENV NVM_DIR="$HOME/.nvm"
RUN mkdir -p .nvm && \
    (curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash) && \
    . "$NVM_DIR/nvm.sh" && nvm install ${NODE_VERSION} && \
    . "$NVM_DIR/nvm.sh" && nvm use v${NODE_VERSION} && \
    . "$NVM_DIR/nvm.sh" && nvm alias default v${NODE_VERSION}
ENV PATH="$HOME/.nvm/versions/node/v${NODE_VERSION}/bin/:${PATH}"
RUN node --version && npm --version && chown -R "$USERNAME": "$HOME/.nvm"


RUN mkdir -p .ro/emacs.d
COPY dotfiles.cache .dotfiles
RUN mv .bashrc .bashrc.bak && \ 
    cd .dotfiles && gosu "$USERNAME" bash ./deploy.sh && cd .. && \
    ln -s .dotfiles/docker-{{ image_name }}/bashrc.settings .bashrc.local.settings && \
    ln -s .dotfiles/docker-{{ image_name }}/bashrc.startup .bashrc.local.startup
RUN mkdir -p .ro/emacs.d
COPY emacs-init-files.cache .ro/emacs.d/init
RUN chown -R "$USERNAME": .ro/emacs.d && cd .ro/emacs.d/init && gosu "$USERNAME" bash -c ./deploy-inside-docker.sh && cd $WORKDIR && ln -s .ro/emacs.d/init/modules.docker-{{ image_name }} .el.local

# entrypoint script does switches u/g ID's and `chown`s everything
COPY entrypoint.sh /bin/entrypoint.sh
COPY link-dotfiles.sh /bin/link-dotfiles.sh
CMD ["/bin/entrypoint.sh"]
